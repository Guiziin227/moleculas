/**
 * fileLoader.js
 * M√≥dulo respons√°vel por carregar arquivos PDB
 */

/**
 * Carrega um arquivo PDB de uma URL
 * @param {string} url - URL do arquivo PDB
 * @param {Function} onSuccess - Callback chamado quando o arquivo √© carregado
 * @param {Function} onError - Callback chamado em caso de erro
 */
function loadPDB(url, onSuccess, onError) {
  fetch(url)
    .then((response) => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.text();
    })
    .then((data) => {
      if (onSuccess) onSuccess(data);
    })
    .catch((error) => {
      console.error("Erro ao carregar arquivo PDB:", error);
      if (onError) onError(error);
    });
}
/**
 * Manipula sele√ß√£o de arquivo do computador
 * @param {Event} event - Evento de mudan√ßa do input file
 * @param {Function} onSuccess - Callback chamado quando o arquivo √© carregado
 */
function handleFileSelect(event, onSuccess) {
  const file = event.target.files[0];
  if (file && file.name.toLowerCase().endsWith(".pdb")) {
    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        let contents = e.target.result;

        // Normalizar quebras de linha para garantir compatibilidade
        contents = contents.replace(/\r\n/g, "\n").replace(/\r/g, "\n");

        // Verificar se o conte√∫do n√£o est√° vazio
        if (!contents.trim()) {
          throw new Error("Arquivo PDB vazio ou inv√°lido");
        }

        console.log("üìÅ Arquivo carregado:", file.name);
        console.log("üìä Tamanho do arquivo:", contents.length, "caracteres");

        // Verificar se cont√©m dados PDB v√°lidos
        const hasAtomRecords = /^(ATOM|HETATM)/m.test(contents);
        if (!hasAtomRecords) {
          console.warn("‚ö†Ô∏è Nenhum registro ATOM/HETATM encontrado no arquivo");
        }

        if (onSuccess) onSuccess(contents, file.name);
      } catch (error) {
        console.error("‚ùå Erro ao processar arquivo:", error);
        alert("Erro ao processar arquivo: " + error.message);
      }
    };

    reader.onerror = () => {
      console.error("‚ùå Erro ao ler arquivo");
      alert(
        "Erro ao ler o arquivo. Verifique se o arquivo n√£o est√° corrompido.",
      );
    };

    // Usar readAsText com encoding UTF-8 expl√≠cito
    reader.readAsText(file, "UTF-8");
  } else {
    alert("Por favor, selecione apenas arquivos .pdb");
  }
}

/**
 * Valida se o conte√∫do PDB √© v√°lido
 * @param {string} pdbContent - Conte√∫do do arquivo PDB
 * @returns {boolean} - True se v√°lido
 */
function validatePDBContent(pdbContent) {
  if (!pdbContent || typeof pdbContent !== "string") {
    return false;
  }

  // Verificar se cont√©m pelo menos um registro ATOM ou HETATM
  const atomPattern = /^(ATOM|HETATM)\s+\d+/m;
  return atomPattern.test(pdbContent);
}

/**
 * Configura os listeners do seletor de arquivos
 * @param {Function} onLoadCallback - Callback quando uma mol√©cula √© carregada
 */
function setupFileSelector(onLoadCallback) {
  // Listener para carregar arquivo do computador
  document.getElementById("fileInput").addEventListener(
    "change",
    (event) => {
      handleFileSelect(event, (contents, fileName) => {
        // Validar conte√∫do antes de passar para o callback
        if (validatePDBContent(contents)) {
          console.log("‚úÖ Arquivo PDB v√°lido:", fileName);
          if (onLoadCallback) {
            onLoadCallback(contents, fileName);
          }
        } else {
          console.error("‚ùå Arquivo PDB inv√°lido:", fileName);
          alert("O arquivo selecionado n√£o parece ser um arquivo PDB v√°lido.");
        }
      });
    },
    false,
  );

  // Bot√£o de carregar arquivo
  document.getElementById("loadButton").addEventListener("click", () => {
    const fileInput = document.getElementById("fileInput");
    if (fileInput.files.length > 0) {
      const event = { target: fileInput };
      handleFileSelect(event, (contents, fileName) => {
        if (validatePDBContent(contents)) {
          console.log("‚úÖ Arquivo PDB v√°lido:", fileName);
          if (onLoadCallback) {
            onLoadCallback(contents, fileName);
          }
        } else {
          console.error("‚ùå Arquivo PDB inv√°lido:", fileName);
          alert("O arquivo selecionado n√£o parece ser um arquivo PDB v√°lido.");
        }
      });
    } else {
      alert("Por favor, selecione um arquivo PDB primeiro!");
    }
  });

  // Listener para carregar mol√©cula do projeto
  document.getElementById("loadProjectButton").addEventListener("click", () => {
    const select = document.getElementById("projectMolecules");
    const value = select.value;
    if (value) {
      const selectedName = select.options[select.selectedIndex].text;
      console.log("üåê Carregando do projeto:", selectedName);
      loadPDB(
        value,
        (data) => {
          if (validatePDBContent(data)) {
            console.log("‚úÖ Mol√©cula do projeto carregada:", selectedName);
            if (onLoadCallback) {
              onLoadCallback(data, selectedName);
            }
          } else {
            console.error("‚ùå Dados PDB inv√°lidos do projeto:", selectedName);
            alert("Os dados da mol√©cula do projeto parecem estar corrompidos.");
          }
        },
        (error) => {
          console.error("‚ùå Erro ao carregar mol√©cula do projeto:", error);
          alert("Erro ao carregar mol√©cula: " + error.message);
        },
      );
    } else {
      alert("Por favor, selecione uma mol√©cula do projeto primeiro!");
    }
  });
}
